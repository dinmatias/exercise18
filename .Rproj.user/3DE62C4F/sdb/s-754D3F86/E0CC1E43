{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\n\nsource(\"functions/simfunctions.R\")\n\nshinyServer(function(input, output, session) {\n  \n  values <- reactiveValues(df = NULL)\n  \n  hover <- reactiveValues(x = NULL,  y = NULL)\n  # dataFile <- \n  observeEvent(input$sim, {\n    \n    # Define Inputs:\n    numGen <- as.numeric(input$numGen)\n    popSize1 <- as.numeric(input$PopSize1)\n    iniFreq1 <- as.numeric(input$InFreq1)\n    \n    selReg <- input$selcheckbox\n    \n    if(selReg){\n      relFitness1 <- as.numeric(c(input$fitAA, input$fitAa, input$fitaa))\n      relFitness2 <- as.numeric(c(input$fitAA, input$fitAa, input$fitaa))\n    }else{\n      relFitness1 <- relFitness1 <- c(1,1,1)\n    }\n    \n    \n    mig <- input$gfcheckbox\n    \n    if(mig){\n      popSize2 <- as.numeric(input$popSize2)\n      iniFreq2 <- as.numeric(input$InFreq2)\n      gf12 <- as.numeric(input$gfmig12)\n      gf21 <- as.numeric(input$gfmig21)\n    }else{\n      popSize2 <- iniFreq2 <- gf12 <- gf21 <- NULL\n    }\n    \n    bottleneck <- input$botcheckbox\n    \n    if(bottleneck){\n      \n      botPost <- as.numeric(input$botPost)\n      botPercent <- as.numeric(input$botPercent)\n      priorbot <- numGen - botPost\n      preBot <- evolvePop(numGen = priorbot,\n                          popSize1 = popSize1, iniFreq1 = iniFreq1,\n                          mig = mig, popSize2 = popSize2, iniFreq2 = iniFreq2,\n                          gf12 = gf12, gf21 = gf21,\n                          selReg = selReg, relFitness1 = relFitness1, relFitness2 = relFitness2)\n      \n      freqPost <- tail(preBot$Pop1freqA, n = 1)\n      \n      postBot <- evolvePop(numGen = botPost,\n                           popSize1 = (popSize1 * botPercent), iniFreq1 = freqPost,\n                           mig = mig, popSize2 = popSize2, iniFreq2 = iniFreq2,\n                           gf12 = gf12, gf21 = gf21,\n                           selReg = selReg, relFitness1 = relFitness1, relFitness2 = relFitness2)\n      \n      postBot <- postBot[-1, ]\n      \n      postBot$Generation <- postBot$Generation + priorbot\n      \n      outfile <- rbind(preBot, postBot)\n      \n    }else{\n      \n      outfile <- evolvePop(numGen = numGen,\n                           popSize1 = popSize1, iniFreq1 = iniFreq1,\n                           mig = mig, popSize2 = popSize2, iniFreq2 = iniFreq2,\n                           gf12 = gf12, gf21 = gf21,\n                           selReg = selReg, relFitness1 = relFitness1, relFitness2 = relFitness2)\n      \n      \n    }\n    \n    \n    \n    \n    tempHolder <- as.data.frame(matrix( nrow = 0, ncol = ncol(outfile)),\n                                stringsAsFactors = F)\n    \n    names(tempHolder) <- names(outfile)\n    \n    values$df <- tempHolder\n    values$results <- outfile\n    outfile\n    \n    # session$sendCustomMessage(type = 'testmessage',\n    #                           message = \"Simulations Complete\")\n    \n    showNotification(ui = \"Simulation Complete\", duration = NULL)\n    \n    \n  })\n  \n  \n  output$frequencyPlot <- renderPlot({\n    \n    if(!is.null(values$results)){\n      # x <- dataFile()\n      x <- values$results\n      \n      colr <- rgb(red = 1, green = 0, blue = 0, alpha = 0.05, names = NULL, maxColorValue = 1)\n      \n      plot(x = x$Generation, y = x$Pop1freqA,\n           pch = 20, col = colr, ylim = c(0,1),\n           ylab = \"Frequency Allele A \", xlab = \"Generations\",\n           cex = 1.5, cex.lab = 1.5)\n      \n      lines(x = x$Generation, y = x$Pop1freqA, col = \"red\", lwd = 2)\n      \n      # abline(v = input$botPrior, lwd = 2, lty = 2, col = \"grey\")\n      \n      if(input$gfcheckbox){\n        colrpop2 <- rgb(red = 0, green = 0, blue = 1, alpha = 0.05, names = NULL, maxColorValue = 1)\n        points(x = x$Generation, y = x$Pop2freqA, col = colrpop2, pch = 20, cex = 1.5)\n        lines(x = x$Generation, y = x$Pop2freqA, col = \"blue\")\n      }\n      if(input$botcheckbox){\n        abline(v = as.numeric(input$botPost), lty = 2, lwd = 1.5, col = \"grey\")\n      }\n      \n    }else{\n      \n      \n      colr <- rgb(red = 1, green = 0, blue = 0, alpha = 0.05, names = NULL, maxColorValue = 1)\n      \n      plot(x = 1:100, y = rep(0.5, 100),\n           pch = 20, col = colr, ylim = c(0,1),\n           ylab = \"Frequency Allele A \", xlab = \"Generations\",\n           cex = 1.5, cex.lab = 1.5, type = \"n\")\n      \n      \n    }\n    \n  })\n  \n  output$value <- renderPrint({ input$driftcheckbox })\n  \n  \n  sampleList <- eventReactive(input$plot_brush, {\n    \n    # resTable <- dataFile()\n    resTable <- values$results\n    \n    res <- brushedPoints(resTable[ , c(1,5)], input$plot_brush, \"Generation\", \"Pop1freqA\")\n    \n    if (nrow(res) == 0)\n      return()\n    \n    if(nrow(res) > 10){\n      subsamp <- 10\n    }else{\n      subsamp <- nrow(res)\n    }\n    \n    censusList <- res[1:subsamp, ]\n    censusList\n    \n  })\n  \n  # output$plot_brushedpoints <- renderTable({\n  #   x <- sampleList()\n  #   data.frame(Generation = x$Generation)\n  # })\n  \n  output$plot_brushedpoints <- renderText({\n    x <- sampleList()\n    paste(x$Generation, collapse = \",\")\n  })\n  \n  observeEvent(input$censusList, {\n    \n    temp <- values$df\n    \n    # alldata <- dataFile()\n    alldata <- values$results\n    \n    subData <- sampleList()\n    \n    x <- alldata[alldata$Generation %in% subData$Generation, ]\n    \n    temp <- rbind(temp, x)\n    \n    temp <- temp[order(temp$Generation),]\n    temp <- temp[!duplicated(temp$Generation), ]\n    values$df <- temp\n    \n    \n  })\n  \n  output$censusResults <- DT::renderDataTable({\n    showTable <- NULL\n    tempHolder <- values$df    \n    \n    rownames(tempHolder) <- NULL\n    \n    if(ncol(tempHolder) > 6){\n      \n      showTable <- data.frame(Generation = tempHolder$Generation,\n                              AA = apply(tempHolder[ , c(2, 6)], 1, sum),\n                              Aa = apply(tempHolder[ , c(3, 7)], 1, sum),\n                              aa = apply(tempHolder[ , c(4, 8)], 1, sum),\n                              stringsAsFactors = FALSE)\n      \n      \n    }else{\n      \n      showTable <- tempHolder[ , 1:4]\n      names(showTable)[2:4] <- c(\"AA\", \"Aa\", \"aa\")\n      \n    }\n    \n    DT::datatable(showTable, options = list(sDom  = '<\"top\">rt<\"bottom\">ip'),\n                  rownames = FALSE)\n    \n    \n  })\n  \n  output$plot_hoverinfox <- renderText({\n    \n    if(is.null(input$plot_hover)){\n      x <- NA\n    }else{\n      x <- round(input$plot_hover$x, 0)\n    }\n    \n    x\n    \n    \n  })\n  \n  output$plot_hoverinfoy <- renderText({\n    \n    if(is.null(input$plot_hover)){\n      y <- NA\n    }else{\n      y <- round(input$plot_hover$y, 2)\n    }\n    \n    y\n    \n  })\n\n})\n",
    "created" : 1504548668973.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3220476243",
    "id" : "E0CC1E43",
    "lastKnownWriteTime" : 1504549851,
    "last_content_update" : 1504549851096,
    "path" : "D:/Dropbox/exercise18/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}